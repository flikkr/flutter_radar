// Autogenerated from Pigeon (v24.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.radar.flutter

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class Version (
  val dartVersion: String,
  val channel: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): Version {
      val dartVersion = pigeonVar_list[0] as String
      val channel = pigeonVar_list[1] as String
      return Version(dartVersion, channel)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      dartVersion,
      channel,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterApp (
  val packageName: String,
  val flutterLibPath: String,
  val appLibPath: String? = null,
  val version: Version? = null,
  val zipEntryPath: String? = null,
  val label: String? = null,
  val appVersion: String? = null,
  val iconBytes: ByteArray? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): FlutterApp {
      val packageName = pigeonVar_list[0] as String
      val flutterLibPath = pigeonVar_list[1] as String
      val appLibPath = pigeonVar_list[2] as String?
      val version = pigeonVar_list[3] as Version?
      val zipEntryPath = pigeonVar_list[4] as String?
      val label = pigeonVar_list[5] as String?
      val appVersion = pigeonVar_list[6] as String?
      val iconBytes = pigeonVar_list[7] as ByteArray?
      return FlutterApp(packageName, flutterLibPath, appLibPath, version, zipEntryPath, label, appVersion, iconBytes)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      packageName,
      flutterLibPath,
      appLibPath,
      version,
      zipEntryPath,
      label,
      appVersion,
      iconBytes,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ScanEvent (
  val totalApps: Long,
  val currentCount: Long,
  val app: FlutterApp? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ScanEvent {
      val totalApps = pigeonVar_list[0] as Long
      val currentCount = pigeonVar_list[1] as Long
      val app = pigeonVar_list[2] as FlutterApp?
      return ScanEvent(totalApps, currentCount, app)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      totalApps,
      currentCount,
      app,
    )
  }
}
private open class DetectorHostApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Version.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterApp.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ScanEvent.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Version -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is FlutterApp -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is ScanEvent -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

val DetectorHostApiPigeonMethodCodec = StandardMethodCodec(DetectorHostApiPigeonCodec());


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface DetectorHostApi {
  fun getApps(callback: (Result<List<FlutterApp>>) -> Unit)
  fun getPackages(appLibPath: String, zipEntryPath: String?, callback: (Result<List<String>>) -> Unit)

  companion object {
    /** The codec used by DetectorHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      DetectorHostApiPigeonCodec()
    }
    /** Sets up an instance of `DetectorHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: DetectorHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_radar.DetectorHostApi.getApps$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getApps{ result: Result<List<FlutterApp>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_radar.DetectorHostApi.getPackages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appLibPathArg = args[0] as String
            val zipEntryPathArg = args[1] as String?
            api.getPackages(appLibPathArg, zipEntryPathArg) { result: Result<List<String>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}

private class DetectorHostApiPigeonStreamHandler<T>(
    val wrapper: DetectorHostApiPigeonEventChannelWrapper<T>
) : EventChannel.StreamHandler {
  var pigeonSink: PigeonEventSink<T>? = null

  override fun onListen(p0: Any?, sink: EventChannel.EventSink) {
    pigeonSink = PigeonEventSink<T>(sink)
    wrapper.onListen(p0, pigeonSink!!)
  }

  override fun onCancel(p0: Any?) {
    pigeonSink = null
    wrapper.onCancel(p0)
  }
}

interface DetectorHostApiPigeonEventChannelWrapper<T> {
  open fun onListen(p0: Any?, sink: PigeonEventSink<T>) {}

  open fun onCancel(p0: Any?) {}
}

class PigeonEventSink<T>(private val sink: EventChannel.EventSink) {
  fun success(value: T) {
    sink.success(value)
  }

  fun error(errorCode: String, errorMessage: String?, errorDetails: Any?) {
    sink.error(errorCode, errorMessage, errorDetails)
  }

  fun endOfStream() {
    sink.endOfStream()
  }
}
      
abstract class StreamScanEventsStreamHandler : DetectorHostApiPigeonEventChannelWrapper<ScanEvent> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: StreamScanEventsStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.flutter_radar.ScanEventChannel.streamScanEvents"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = DetectorHostApiPigeonStreamHandler<ScanEvent>(streamHandler)
      EventChannel(messenger, channelName, DetectorHostApiPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
